# Application Configuration
spring.application.name=system_clinic
server.servlet.context-path=/system_clinic/api/v0.1/
server.port=8080

# Database Configuration using Environment Variables
# For production, set these as actual environment variables
# Windows: set DB_URL=your_value
# Linux/Mac: export DB_URL=your_value
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/system_clinic}
spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:root}

# JPA/Hibernate Configuration
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.format_sql=true

# JWT Configuration
# For production, generate a strong secret key and set as environment variable
# You can use: https://www.allkeysgenerator.com/Random/Security-Encryption-Key-Generator.aspx
jwt.secret=${JWT_SECRET:404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970}
# Access token validity (24 hours in milliseconds)
jwt.expiration=${JWT_EXPIRATION:86400000}
# Refresh token validity (7 days in milliseconds)
jwt.refresh-token.expiration=${JWT_REFRESH_EXPIRATION:604800000}

# Spring Security Configuration
spring.security.filter.order=10

# CORS Configuration
# For production, replace with your actual frontend domain
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000}
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=Authorization,Content-Type,X-Requested-With
cors.max-age=3600

# Logging Configuration
logging.level.org.springframework.security=INFO
logging.level.org.springframework.web=INFO
logging.level.org.example.clinic_system=DEBUG

# Enable response compression
server.compression.enabled=true
